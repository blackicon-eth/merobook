/** @generated by @calimero/abi-codegen â€” DO NOT EDIT. */

import {
  CalimeroApp,
  Context,
} from '@calimero-network/calimero-client';

// Generated types

export interface Post {
  id: string;
  author: string;
  content: string;
  timestamp: number;
  likes: number;
}



export type AbiEvent =
  | { name: "PostCreated" }
  | { name: "PostLiked" }
;


/**
 * Utility class for handling byte conversions in Calimero
 */
export class CalimeroBytes {
  private data: Uint8Array;

  constructor(input: string | number[] | Uint8Array) {
    if (typeof input === "string") {
      // Hex string
      this.data = new Uint8Array(
        input.match(/.{1,2}/g)?.map((byte) => parseInt(byte, 16)) || []
      );
    } else if (Array.isArray(input)) {
      // Number array
      this.data = new Uint8Array(input);
    } else {
      // Uint8Array
      this.data = input;
    }
  }

  toArray(): number[] {
    return Array.from(this.data);
  }

  toUint8Array(): Uint8Array {
    return this.data;
  }

  static fromHex(hex: string): CalimeroBytes {
    return new CalimeroBytes(hex);
  }

  static fromArray(arr: number[]): CalimeroBytes {
    return new CalimeroBytes(arr);
  }

  static fromUint8Array(bytes: Uint8Array): CalimeroBytes {
    return new CalimeroBytes(bytes);
  }
}

/**
 * Convert CalimeroBytes instances to arrays for WASM compatibility
 */
function convertCalimeroBytesForWasm(obj: any): any {
  if (obj === null || obj === undefined) {
    return obj;
  }

  if (obj instanceof CalimeroBytes) {
    return obj.toArray();
  }

  if (Array.isArray(obj)) {
    return obj.map(item => convertCalimeroBytesForWasm(item));
  }

  if (typeof obj === "object") {
    const result: any = {};
    for (const [key, value] of Object.entries(obj)) {
      result[key] = convertCalimeroBytesForWasm(value);
    }
    return result;
  }

  return obj;
}

/**
 * Convert arrays back to CalimeroBytes instances from WASM responses
 */
function convertWasmResultToCalimeroBytes(obj: any): any {
  if (obj === null || obj === undefined) {
    return obj;
  }

  if (Array.isArray(obj) && obj.every(item => typeof item === "number")) {
    return new CalimeroBytes(obj);
  }

  if (Array.isArray(obj)) {
    return obj.map(item => convertWasmResultToCalimeroBytes(item));
  }

  if (typeof obj === "object") {
    const result: any = {};
    for (const [key, value] of Object.entries(obj)) {
      result[key] = convertWasmResultToCalimeroBytes(value);
    }
    return result;
  }

  return obj;
}

export class AbiClient {
  private app: CalimeroApp;
  private context: Context;

  constructor(app: CalimeroApp, context: Context) {
    this.app = app;
    this.context = context;
  }

  /**
   * init
   */
  public async init(): Promise<void> {
    const response = await this.app.execute(this.context, 'init', {});
    if (response.success) {
      return response.result as void;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * create_post
   */
  public async createPost(params: { author: string; content: string }): Promise<Post> {
    const response = await this.app.execute(this.context, 'create_post', params);
    if (response.success) {
      return response.result as Post;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * get_all_posts
   */
  public async getAllPosts(): Promise<Post[]> {
    const response = await this.app.execute(this.context, 'get_all_posts', {});
    if (response.success) {
      return response.result as Post[];
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * get_post
   */
  public async getPost(params: { id: string }): Promise<Post> {
    const response = await this.app.execute(this.context, 'get_post', params);
    if (response.success) {
      return response.result as Post;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * like_post
   */
  public async likePost(params: { id: string }): Promise<Post> {
    const response = await this.app.execute(this.context, 'like_post', params);
    if (response.success) {
      return response.result as Post;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * get_post_count
   */
  public async getPostCount(): Promise<number> {
    const response = await this.app.execute(this.context, 'get_post_count', {});
    if (response.success) {
      return response.result as number;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

}